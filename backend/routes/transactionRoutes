const express = require("express");
const router = express.Router();
const User = require("../models/User");
const Transaction = require("../models/Transaction");

// Middleware já tá no server.js, mas req.user vem do authenticateToken

// Transferência
async function transfer(req, res) {
  const { toAccount, amount, description } = req.body;
  const fromAccount = req.user.accountNumber;

  try {
    console.log(
      `Iniciando transferência: de ${fromAccount} para ${toAccount}, valor: ${amount}`
    );
    const sender = await User.findOne({ accountNumber: fromAccount });
    const receiver = await User.findOne({ accountNumber: toAccount });

    if (!sender || !receiver)
      return res.status(404).json({ error: "Conta não encontrada" });
    if (sender.balance < amount)
      return res.status(400).json({ error: "Saldo insuficiente" });
    if (amount <= 0)
      return res.status(400).json({ error: "O valor deve ser maior que zero" });

    sender.balance -= amount;
    receiver.balance += amount;
    await sender.save();
    await receiver.save();

    const transaction = new Transaction({
      type: "transfer",
      amount,
      fromAccount,
      targetAccount: toAccount,
      description: description || "Transferência",
      userId: req.user.id,
    });
    await transaction.save();

    res.json({
      message: "Transferência realizada com sucesso",
      balance: sender.balance,
    });
  } catch (error) {
    console.error("Erro na transferência:", error);
    res.status(500).json({ error: "Erro ao processar transferência" });
  }
}

// Depósito
async function deposit(req, res) {
  const { toAccount, amount } = req.body;
  const fromAccount = req.user.accountNumber;

  try {
    console.log(`Iniciando depósito: para ${toAccount}, valor: ${amount}`);
    const user = await User.findOne({ accountNumber: toAccount });
    if (!user)
      return res.status(404).json({ error: "Conta destino não encontrada" });
    if (amount <= 0)
      return res.status(400).json({ error: "O valor deve ser maior que zero" });

    user.balance += amount;
    await user.save();

    const transaction = new Transaction({
      type: "deposit",
      amount,
      fromAccount,
      targetAccount: toAccount,
      userId: req.user.id,
      description: "Depósito realizado",
    });
    await transaction.save();

    res.json({
      message: "Depósito realizado com sucesso",
      balance: user.balance,
    });
  } catch (error) {
    console.error("Erro no depósito:", error);
    res.status(500).json({ error: "Erro ao processar depósito" });
  }
}

// Saque
async function withdrawal(req, res) {
  const { amount } = req.body;
  const fromAccount = req.user.accountNumber;

  try {
    console.log(`Iniciando saque: de ${fromAccount}, valor: ${amount}`);
    const user = await User.findOne({ accountNumber: fromAccount });
    if (!user) return res.status(404).json({ error: "Conta não encontrada" });
    if (user.balance < amount)
      return res.status(400).json({ error: "Saldo insuficiente" });
    if (amount <= 0)
      return res.status(400).json({ error: "O valor deve ser maior que zero" });

    user.balance -= amount;
    await user.save();

    const transaction = new Transaction({
      type: "withdrawal",
      amount,
      fromAccount,
      targetAccount: null,
      userId: req.user.id,
      description: "Saque realizado",
    });
    await transaction.save();

    res.json({ message: "Saque realizado com sucesso", balance: user.balance });
  } catch (error) {
    console.error("Erro no saque:", error);
    res.status(500).json({ error: "Erro ao processar saque" });
  }
}

// Histórico
async function getHistory(req, res) {
  try {
    console.log(`Buscando histórico para userId: ${req.user.id}`);
    const transactions = await Transaction.find({ userId: req.user.id });
    if (!transactions || transactions.length === 0) {
      return res.json({ message: "Nenhuma transação encontrada", data: [] });
    }
    res.json({ message: "Histórico carregado", data: transactions });
  } catch (error) {
    console.error("Erro ao buscar histórico:", error);
    res.status(500).json({ error: "Erro ao buscar histórico" });
  }
}

// PIX Transferência
async function pixTransfer(req, res) {
  const { toAccount, amount, description } = req.body;
  const fromAccount = req.user.accountNumber;

  try {
    console.log(
      `Iniciando PIX transferência: de ${fromAccount} para ${toAccount}, valor: ${amount}`
    );
    const sender = await User.findOne({ accountNumber: fromAccount });
    const receiver = await User.findOne({ accountNumber: toAccount });

    if (!sender || !receiver)
      return res.status(404).json({ error: "Conta não encontrada" });
    if (sender.balance < amount)
      return res.status(400).json({ error: "Saldo insuficiente" });
    if (amount <= 0)
      return res.status(400).json({ error: "O valor deve ser maior que zero" });

    sender.balance -= amount;
    receiver.balance += amount;
    await sender.save();
    await receiver.save();

    const transaction = new Transaction({
      type: "pix/transfer",
      amount,
      fromAccount,
      targetAccount: toAccount,
      description: description || "PIX Transferência",
      userId: req.user.id,
    });
    await transaction.save();

    res.json({
      message: "PIX Transferência realizada com sucesso",
      balance: sender.balance,
    });
  } catch (error) {
    console.error("Erro na PIX transferência:", error);
    res.status(500).json({ error: "Erro ao processar PIX transferência" });
  }
}

// PIX Pagamento
async function pixPayment(req, res) {
  const { targetKey, amount } = req.body;
  const fromAccount = req.user.accountNumber;

  try {
    console.log(
      `Iniciando PIX pagamento: de ${fromAccount} para ${targetKey}, valor: ${amount}`
    );
    const sender = await User.findOne({ accountNumber: fromAccount });
    const receiver = await User.findOne({ pixKey: targetKey });

    if (!sender || !receiver)
      return res
        .status(404)
        .json({ error: "Conta ou chave PIX não encontrada" });
    if (sender.balance < amount)
      return res.status(400).json({ error: "Saldo insuficiente" });
    if (amount <= 0)
      return res.status(400).json({ error: "O valor deve ser maior que zero" });

    sender.balance -= amount;
    receiver.balance += amount;
    await sender.save();
    await receiver.save();

    const transaction = new Transaction({
      type: "pix/payment",
      amount,
      fromAccount,
      targetAccount: receiver.accountNumber,
      description: "PIX Pagamento",
      userId: req.user.id,
    });
    await transaction.save();

    res.json({
      message: "PIX Pagamento realizado com sucesso",
      balance: sender.balance,
    });
  } catch (error) {
    console.error("Erro no PIX pagamento:", error);
    res.status(500).json({ error: "Erro ao processar PIX pagamento" });
  }
}

// PIX Recebimento
async function pixReceive(req, res) {
  const fromAccount = req.user.accountNumber;

  try {
    console.log(`Consultando chave PIX para recebimento: ${fromAccount}`);
    const user = await User.findOne({ accountNumber: fromAccount });
    if (!user) return res.status(404).json({ error: "Conta não encontrada" });

    const pixKey = user.pixKey || "Chave não registrada";
    res.json({ message: "Chave PIX para recebimento", pixKey });
  } catch (error) {
    console.error("Erro no PIX recebimento:", error);
    res.status(500).json({ error: "Erro ao consultar chave PIX" });
  }
}

// Recarga de Celular
async function recharge(req, res) {
  const { operator, phoneNumber, amount } = req.body;
  const fromAccount = req.user.accountNumber;

  try {
    console.log(
      `Iniciando recarga: de ${fromAccount} para ${phoneNumber}, operadora: ${operator}, valor: ${amount}`
    );
    const sender = await User.findOne({ accountNumber: fromAccount });

    if (!sender) return res.status(404).json({ error: "Conta não encontrada" });
    if (sender.balance < amount)
      return res.status(400).json({ error: "Saldo insuficiente" });
    if (amount <= 0)
      return res.status(400).json({ error: "O valor deve ser maior que zero" });

    sender.balance -= amount;
    await sender.save();

    const transaction = new Transaction({
      type: "recharge",
      amount,
      fromAccount,
      targetAccount: phoneNumber,
      description: `Recarga ${operator}`,
      userId: req.user.id,
    });
    await transaction.save();

    res.json({
      message: "Recarga realizada com sucesso",
      balance: sender.balance,
    });
  } catch (error) {
    console.error("Erro na recarga:", error);
    res.status(500).json({ error: "Erro ao processar recarga" });
  }
}

// PIX Registro
async function pixRegister(req, res) {
  const { pixKey } = req.body;
  const fromAccount = req.user.accountNumber;

  try {
    console.log(`Registrando chave PIX: ${pixKey} para ${fromAccount}`);
    const user = await User.findOne({ accountNumber: fromAccount });
    const existingKey = await User.findOne({ pixKey });

    if (!user) return res.status(404).json({ error: "Conta não encontrada" });
    if (existingKey && existingKey.accountNumber !== fromAccount) {
      return res
        .status(400)
        .json({ error: "Chave PIX já registrada por outro usuário" });
    }

    user.pixKey = pixKey;
    await user.save();

    const transaction = new Transaction({
      type: "pix/register",
      amount: 0,
      fromAccount,
      targetAccount: null,
      description: `Registro de chave PIX: ${pixKey}`,
      userId: req.user.id,
    });
    await transaction.save();

    res.json({ message: "Chave PIX registrada com sucesso", pixKey });
  } catch (error) {
    console.error("Erro no registro de chave PIX:", error);
    res.status(500).json({ error: "Erro ao registrar chave PIX" });
  }
}

// Pagar Boleto
async function payBill(req, res) {
  const { billCode, amount } = req.body;
  const fromAccount = req.user.accountNumber;

  try {
    console.log(
      `Iniciando pagamento de boleto: de ${fromAccount}, código: ${billCode}, valor: ${amount}`
    );
    const user = await User.findOne({ accountNumber: fromAccount });
    if (!user) return res.status(404).json({ error: "Conta não encontrada" });
    if (user.balance < amount)
      return res.status(400).json({ error: "Saldo insuficiente" });
    if (amount <= 0)
      return res.status(400).json({ error: "O valor deve ser maior que zero" });

    user.balance -= amount;
    await user.save();

    const transaction = new Transaction({
      type: "bill/pay", // Alinhado com dashboard.js
      amount,
      fromAccount,
      targetAccount: billCode,
      description: "Pagamento de boleto",
      userId: req.user.id,
    });
    await transaction.save();

    res.json({ message: "Boleto pago com sucesso", balance: user.balance });
  } catch (error) {
    console.error("Erro no pagamento de boleto:", error);
    res.status(500).json({ error: "Erro ao pagar boleto" });
  }
}

// Pegar Empréstimo
async function getLoan(req, res) {
  const { amount } = req.body;
  const fromAccount = req.user.accountNumber;

  try {
    console.log(`Iniciando empréstimo: para ${fromAccount}, valor: ${amount}`);
    const user = await User.findOne({ accountNumber: fromAccount });
    if (!user) return res.status(404).json({ error: "Conta não encontrada" });
    if (amount <= 0)
      return res.status(400).json({ error: "O valor deve ser maior que zero" });

    user.balance += amount;
    await user.save();

    const transaction = new Transaction({
      type: "loan",
      amount,
      fromAccount: "Banco",
      targetAccount: fromAccount,
      description: "Empréstimo recebido",
      userId: req.user.id,
    });
    await transaction.save();

    res.json({
      message: "Empréstimo recebido com sucesso",
      balance: user.balance,
    });
  } catch (error) {
    console.error("Erro no empréstimo:", error);
    res.status(500).json({ error: "Erro ao pegar empréstimo" });
  }
}

// Investir
async function invest(req, res) {
  const { amount, investmentType } = req.body;
  const fromAccount = req.user.accountNumber;

  try {
    console.log(
      `Iniciando investimento: de ${fromAccount}, tipo: ${investmentType}, valor: ${amount}`
    );
    const user = await User.findOne({ accountNumber: fromAccount });
    if (!user) return res.status(404).json({ error: "Conta não encontrada" });
    if (user.balance < amount)
      return res.status(400).json({ error: "Saldo insuficiente" });
    if (amount <= 0)
      return res.status(400).json({ error: "O valor deve ser maior que zero" });

    user.balance -= amount;
    await user.save();

    const transaction = new Transaction({
      type: "invest", // Alinhado com dashboard.js
      amount,
      fromAccount,
      targetAccount: investmentType,
      description: `Investimento em ${investmentType}`,
      userId: req.user.id,
    });
    await transaction.save();

    res.json({
      message: "Investimento realizado com sucesso",
      balance: user.balance,
    });
  } catch (error) {
    console.error("Erro no investimento:", error);
    res.status(500).json({ error: "Erro ao investir" });
  }
}

// Cobrança PIX
async function pixCharge(req, res) {
  const { amount, description } = req.body;
  const fromAccount = req.user.accountNumber;

  try {
    console.log(`Iniciando cobrança PIX: de ${fromAccount}, valor: ${amount}`);
    const user = await User.findOne({ accountNumber: fromAccount });
    if (!user) return res.status(404).json({ error: "Conta não encontrada" });
    if (amount <= 0)
      return res.status(400).json({ error: "O valor deve ser maior que zero" });

    const chargeCode = `PIXCHARGE-${Date.now()}-${fromAccount}`;
    const transaction = new Transaction({
      type: "pix/charge",
      amount,
      fromAccount,
      targetAccount: null,
      description: description || "Cobrança PIX",
      userId: req.user.id,
    });
    await transaction.save();

    res.json({ message: "Cobrança PIX gerada", chargeCode });
  } catch (error) {
    console.error("Erro na cobrança PIX:", error);
    res.status(500).json({ error: "Erro ao gerar cobrança PIX" });
  }
}

// Programar PIX
async function pixSchedule(req, res) {
  const { toAccount, amount, scheduleDate, description } = req.body;
  const fromAccount = req.user.accountNumber;

  try {
    console.log(
      `Iniciando agendamento PIX: de ${fromAccount} para ${toAccount}, valor: ${amount}, data: ${scheduleDate}`
    );
    const user = await User.findOne({ accountNumber: fromAccount });
    if (!user) return res.status(404).json({ error: "Conta não encontrada" });
    if (amount <= 0)
      return res.status(400).json({ error: "O valor deve ser maior que zero" });

    const transaction = new Transaction({
      type: "pix/schedule",
      amount,
      fromAccount,
      targetAccount: toAccount,
      description: description || "PIX agendado",
      userId: req.user.id,
      scheduleDate: new Date(scheduleDate),
    });
    await transaction.save();

    res.json({ message: "PIX agendado com sucesso" });
  } catch (error) {
    console.error("Erro ao agendar PIX:", error);
    res.status(500).json({ error: "Erro ao agendar PIX" });
  }
}

// Define as rotas no Express Router
router.post("/transfer", transfer);
router.post("/deposit", deposit);
router.post("/withdrawal", withdrawal);
router.get("/history", getHistory);
router.post("/pix/transfer", pixTransfer);
router.post("/pix/payment", pixPayment);
router.get("/pix/receive", pixReceive);
router.post("/recharge", recharge); // Renomeado de cellRecharge
router.post("/pix/register", pixRegister);
router.post("/bill/pay", payBill);
router.post("/loan", getLoan);
router.post("/invest", invest);
router.post("/pix/charge", pixCharge);
router.post("/pix/schedule", pixSchedule);

module.exports = router;
